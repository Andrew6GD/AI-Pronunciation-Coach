// Azure AI Text-to-Speech Service
import { escapeXml } from '../utils/xmlUtils'
import { getAllowedVoiceIds, getVoiceId, isValidVoiceCombination } from '../config/voiceConfig'

class AzureTTSService {
  constructor() {
    // ‰ΩøÁî®Êú¨Âú∞Netlify FunctionsÁ´ØÁÇπÔºå‰∏çÂÜçÈúÄË¶ÅÂâçÁ´ØÊö¥Èú≤APIÂØÜÈí•
    this.apiEndpoint = '/.netlify/functions/tts';
    
    // ÂºÄÂèëÁéØÂ¢É‰∏ãÂèØËÉΩÈúÄË¶Å‰∏çÂêåÁöÑÁ´ØÁÇπ
    if (import.meta.env.DEV && import.meta.env.VITE_TTS_ENDPOINT) {
      this.apiEndpoint = import.meta.env.VITE_TTS_ENDPOINT;
    }
    
    // Voice mapping for different accents and genders
    this.voiceMap = {
      'us-male': 'en-US-GuyNeural',
      'us-female': 'en-US-JennyNeural', 
      'gb-male': 'en-GB-RyanNeural',
      'gb-female': 'en-GB-SoniaNeural'
    };
    
    // ÂΩìÂâçÊí≠ÊîæÁöÑÈü≥È¢ëÂºïÁî®
    this.currentAudio = null;
    
    // Èü≥È¢ëÁºìÂ≠ò - ÈÅøÂÖçÈáçÂ§çË∞ÉÁî®API
    this.audioCache = new Map();
    
    // ÁºìÂ≠òÂ§ßÂ∞èÈôêÂà∂ÔºàÈò≤Ê≠¢ÂÜÖÂ≠òËøáÂ∫¶‰ΩøÁî®Ôºâ
    this.maxCacheSize = 50;
  }

  // ÁîüÊàêÁºìÂ≠òÈîÆÔºà‰∏çÂåÖÂê´ËØ≠ÈÄüÔºåËØ≠ÈÄüÈÄöËøáplaybackRateÊéßÂà∂Ôºâ
  generateCacheKey(text, accent, gender) {
    return `${text}-${accent}-${gender}`;
  }

  // ÁÆ°ÁêÜÁºìÂ≠òÂ§ßÂ∞è
  manageCacheSize() {
    if (this.audioCache.size >= this.maxCacheSize) {
      // Âà†Èô§ÊúÄÊóßÁöÑÁºìÂ≠òÈ°πÔºàFIFOÁ≠ñÁï•Ôºâ
      const firstKey = this.audioCache.keys().next().value;
      const cachedItem = this.audioCache.get(firstKey);
      if (cachedItem && cachedItem.url) {
        URL.revokeObjectURL(cachedItem.url);
      }
      this.audioCache.delete(firstKey);
    }
  }

  async synthesizeSpeech(text, accent = 'us', gender = 'male', speed = 1.0) {
    // È™åËØÅÂ£∞Èü≥ÁªÑÂêàÊòØÂê¶Âú®ÁôΩÂêçÂçï‰∏≠
    if (!isValidVoiceCombination(accent, gender)) {
      throw new Error(`Invalid voice combination: ${accent}-${gender}. Only whitelisted voices are allowed.`);
    }

    // Ê£ÄÊü•ÁºìÂ≠ò
    const cacheKey = this.generateCacheKey(text, accent, gender);
    if (this.audioCache.has(cacheKey)) {
      console.log('‰ΩøÁî®ÁºìÂ≠òÁöÑÈü≥È¢ë:', cacheKey);
      return this.audioCache.get(cacheKey).blob;
    }

    // ‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑÂ£∞Èü≥ID
    const voiceName = getVoiceId(accent, gender);
    
    if (!voiceName) {
      throw new Error(`Unsupported voice combination: ${accent}-${gender}`);
    }

    // ËÆ°ÁÆóËØ≠ÈÄüÁôæÂàÜÊØî
    const ratePercent = Math.round((speed - 1) * 100);
    const rateString = ratePercent >= 0 ? `+${ratePercent}%` : `${ratePercent}%`;

    try {
      console.log('Ë∞ÉÁî®Êú¨Âú∞TTS API:', cacheKey);
      const response = await fetch(this.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: text,
          voice: voiceName,
          rate: rateString,
          pitch: '0%'
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
        throw new Error(`TTS API error: ${response.status} - ${errorData.error}`);
      }

      const data = await response.json();
      
      // Â∞Übase64Èü≥È¢ëËΩ¨Êç¢‰∏∫Blob
      const binaryString = atob(data.audio);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      const audioBlob = new Blob([bytes], { type: data.contentType || 'audio/mpeg' });
      
      // ÁºìÂ≠òÈü≥È¢ë
      this.manageCacheSize();
      const audioUrl = URL.createObjectURL(audioBlob);
      this.audioCache.set(cacheKey, {
        blob: audioBlob,
        url: audioUrl,
        timestamp: Date.now()
      });
      
      return audioBlob;
    } catch (error) {
      console.error('TTS API Error:', error);
      throw error;
    }
  }

  async playAudio(text, accent = 'us', gender = 'male', speed = 1.0) {
    try {
      // ÂÅúÊ≠¢ÂΩìÂâçÊí≠ÊîæÁöÑÈü≥È¢ë
      this.stop();
      
      const audioBlob = await this.synthesizeSpeech(text, accent, gender, speed);
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      // ËÆæÁΩÆÊí≠ÊîæÈÄüÂ∫¶
      audio.playbackRate = speed;
      this.currentAudio = audio;
      
      return new Promise((resolve, reject) => {
        audio.onended = () => {
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          resolve();
        };
        audio.onerror = (error) => {
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          reject(error);
        };
        audio.play().catch(reject);
      });
    } catch (error) {
      console.error('Azure TTS playback error:', error);
      throw error;
    }
  }

  // Helper method to escape XML characters in text (now using imported function)
  // escapeXml method removed - using imported escapeXml function instead

  // Get available voices for a specific accent
  getAvailableVoices(accent) {
    const voices = [];
    Object.keys(this.voiceMap).forEach(key => {
      if (key.startsWith(accent)) {
        const gender = key.split('-')[1];
        voices.push({
          key,
          accent,
          gender,
          name: this.voiceMap[key]
        });
      }
    });
    return voices;
  }

  // ÂÅúÊ≠¢ÂΩìÂâçÊí≠Êîæ
  stop() {
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      this.currentAudio = null;
    }
  }
  
  // Ê£ÄÊü•ÊòØÂê¶Ê≠£Âú®Êí≠Êîæ
  isPlaying() {
    return !!(this.currentAudio && !this.currentAudio.paused);
  }
  
  // Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠ò
  clearCache() {
    console.log('Ê∏ÖÈô§Azure TTSÁºìÂ≠òÔºåÂÖ±', this.audioCache.size, 'È°π');
    this.audioCache.forEach((cachedItem) => {
      if (cachedItem.url) {
        URL.revokeObjectURL(cachedItem.url);
      }
    });
    this.audioCache.clear();
  }
  
  // Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØ
  getCacheStats() {
    return {
      size: this.audioCache.size,
      maxSize: this.maxCacheSize,
      keys: Array.from(this.audioCache.keys())
    };
  }
  
  // ÂºÄÂèëËÄÖÂ∑•ÂÖ∑ÔºöÂú®ÊéßÂà∂Âè∞ÊòæÁ§∫ÁºìÂ≠òÁä∂ÊÄÅ
  logCacheStats() {
    const stats = this.getCacheStats();
    console.group('üéµ Azure TTS ÁºìÂ≠òÁä∂ÊÄÅ');
    console.log('ÁºìÂ≠òÂ§ßÂ∞è:', stats.size + '/' + stats.maxSize);
    console.log('ÁºìÂ≠òÈ°π:', stats.keys);
    console.groupEnd();
    return stats;
  }
  
  // Check if TTS service is available
  isAvailable() {
    // Êú¨Âú∞APIÊÄªÊòØÂèØÁî®ÁöÑÔºàÂÅáËÆæNetlify FunctionsÊ≠£Â∏∏ËøêË°åÔºâ
    return true;
  }
}

const azureTtsServiceInstance = new AzureTTSService();

// ÂºÄÂèëÁéØÂ¢É‰∏ãÊö¥Èú≤Âà∞ÂÖ®Â±ÄÔºåÊñπ‰æøË∞ÉËØï
if (import.meta.env.DEV) {
  window.azureTtsService = azureTtsServiceInstance;
  window.checkTTSCache = () => azureTtsServiceInstance.logCacheStats();
}

export default azureTtsServiceInstance;